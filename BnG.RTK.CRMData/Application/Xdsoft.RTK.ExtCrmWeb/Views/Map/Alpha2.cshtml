@model IEnumerable<Xdsoft.RTK.ExtCrmWeb.Models.Map.MapModel>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css" integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==" crossorigin="">
@*<script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js" integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==" crossorigin=""></script>*@
<script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet-src.js" integrity="sha512-+ZaXMZ7sjFMiCigvm8WjllFy6g3aou3+GZngAtugLzrmPFKFK7yjSri0XnElvCTu/PrifAYQuxZTybAEkA8VOA==" crossorigin=""></script>
@*sample-geojson.js --> contains geojson data as variables: freeBus, lightRailStop, bicycleRental, campus, coorsField*@


<style>

    html, body {
        height: 100%;
        margin: 0;
    }

    #iframemock {
        /*width: 1500px;
        height: 800px;*/
        width: 1850px;
        height: 720px;
    }

    #map {
        width: 100%;
        height: 100%;
        border: 5px;
        border-color: blue
    }

    .legend {
        line-height: 18px;
        color: #555;
    }

        .legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
            opacity: 0.7;
        }
</style>


<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.SubjectCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SubjectName)
        </th>

        <th>
            @Html.DisplayNameFor(model => model.ProjectCount)
        </th>
    </tr>

    @foreach (var item in Model)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.SubjectCode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SubjectName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ProjectCount)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
        </td>
    </tr>
    }

</table>




@*<div id="iframemock">*@
<div id="map">

</div>
@*</div>*@

@*@{
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
    var jsonModel = serializer.Serialize(Model);
}*@


<script>

    //$(document).ready(function () {
    //    console.log("ready!");
    var mapModels = @Html.Raw(Json.Encode(Model));

    console.log(mapModels);

    var jqxhr = $.getJSON("/JsonData/russian-regions-code.json").done(function (json) {
       // debugger;
        var geojson = {};
        geojson['type'] = 'FeatureCollection';
        geojson['features'] = [];

        for (var key in json) {

            var latLngArray = json[key]["0"]; //object containing containing array "0" containing latlong arrays
            var subjectCode = json[key]["1"];

            var newFeature = {
                "type": "Feature",
                "properties": {
                    "name": key,
                    "subjectcode": subjectCode,
                    "projects": setVarIfUndefined(getProjectCount(subjectCode))
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [
                        latLngArray
                    ]
                }
            }


            geojson.features.push(newFeature);
        } // end loop

        var bounds = new L.LatLngBounds(new L.LatLng(62.5, 108.0), new L.LatLng(62.5, 108.0));
        //var bounds = new L.LatLngBounds(new L.LatLng(30, 50.0), new L.LatLng(70, 120.0));

        var map = L.map('map', {
            //center: [66.0, 99.0],
            //center: [62.5, 112.0],
            center: [62.5, 108.0],
            zoom: 3,
            //minZoom: 3.8,
            minZoom: 1,

            maxZoom: 6,
            zoomDelta: 0.25,
            zoomSnap: 0,
            //zoomSnap: 1,
            wheelPxPerZoomLevel: 100,
            //maxBounds: bounds,
            //todo add bouncing option here or in tilelayer
            maxBoundsViscosity: 1.0

        })


        //L.tileLayer('http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {
        //    //maxZoom: 5,
        //    //minZoom: 3

        //}).addTo(map);

        // control that shows state info on hover
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info');
            this.update();
            return this._div;
        };

        info.update = function (props) {
            this._div.innerHTML = '<h4>Количество проектов у РФ</h4>' + (props ?
                '<b>' + props.name + '</b><br /><p> количество проектов: ' + props.projects + '</p>' :
                'Наведите на субъект');
        };

        info.addTo(map);

        var geojson = L.geoJson(geojson, {

            style: style,
            coordsToLatLng: function (coords) {
                //latitude , longitude, altitude
                //return new L.LatLng(coords[1], coords[0], coords[2]); //Normal behavior
                return new L.LatLng(coords[0], coords[1]);
            },
            onEachFeature: onEachFeature
        });

        geojson.eachLayer(function (layer) {
            layer.bindPopup(layer.feature.properties.name);
        });

        geojson.addTo(map);

        var legend = L.control({ position: 'bottomright' });

        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend'),
                grades = [0, 5, 10],
                labels = [],
                from, to;

            for (var i = 0; i < grades.length; i++) {
                from = grades[i];
                to = grades[i + 1];

                labels.push(
                    '<i style="background:' + getColor(from + 1) + '"></i> ' +
                    from + (to ? '&ndash;' + to : '+'));
            }

            div.innerHTML = labels.join('<br>');
            return div;
        };

        legend.addTo(map);


        //id: 2,
        //    name: 'Cartocdn',
        //        layer: L.tileLayer('http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {
        //            attribution: 'attribution_base'
        //        })

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });

            function highlightFeature(e) {
                var layer = e.target;

                layer.setStyle({
                    weight: 5,
                    color: '#666',
                    dashArray: '',
                    fillOpacity: 0.7
                });

                if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                    layer.bringToFront();
                }

                info.update(layer.feature.properties);
            }

            function resetHighlight(e) {
                geojson.resetStyle(e.target);
                info.update();
            }

            function zoomToFeature(e) {
                map.fitBounds(e.target.getBounds());
            }
        }
    }) //done
        .fail(function (error) {
            console.log('geoJSON ERROR', error);
        });

    function style(feature) {
        return {
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 0.7,
            fillColor: getColor(feature.properties.projects) //ProjectCount
        };
    }

    function setVarIfUndefined(value) {

        return (typeof value === 'undefined') ? 0 : value;
    }

    function getProjectCount(geoJsonSubjectCode) {
        //iter tru array. If subjectRf equals arg return projectCount
        //console.log('geoJsonSubjectCode', geoJsonSubjectCode);

        for (var i = 0; i < mapModels.length; i++) {
            var mapModel = mapModels[i];
           // console.log('mapModel', mapModel);

            if (mapModel.SubjectCode === geoJsonSubjectCode) { //SubjectRF
                console.log('!intersection in getProjectCount() for geoJsonSubjectCode: ' + geoJsonSubjectCode + ' mapModel.ProjectCount= ' + mapModel.ProjectCount)
                return mapModel.ProjectCount
            }

            //else {
            //    return 0;
            //}
        }

    }

    function getRndInteger(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function getColor(projectCount) {

        if (projectCount > 10) {
            return '#FC4E2A';
        }
        if (projectCount > 5 && projectCount <= 10) {
            return '#FD8D3C';
        }
        if (projectCount > 0 && projectCount <= 5) {
            return '#FEB24C';
        }
        else {
            return '#FFEDA0';
        }
    }


//}); end ready





</script>


